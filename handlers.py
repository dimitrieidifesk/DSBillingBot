from init_bot import bot
from core.config import config
import discord
from discord.ui import Button
from discord.ext import commands
from loguru import logger
from db.sqlite import SQLite
from db.init_db import db
from core.yookassa_provider import Yookassa_Provider
import asyncio
from worker import check_payments, take_away_overdue_roles


async def start_worker_proccess():
    await bot.wait_until_ready()
    while True:
        await check_payments(MAIN_GUILD)
        await take_away_overdue_roles(MAIN_GUILD)
        await asyncio.sleep(10)


async def handle_messages(queue):
    while True:
        user_id, message = queue.get()
        logger.info("handle_messages –ø—Ä–∏–Ω—è–ª –∫–æ–º–∞–Ω–¥—É")
        user = await bot.fetch_user(user_id)
        await user.send(message)


@bot.command()
@commands.has_role(config.ADMIN_ROLE_NAME)
async def add_role_to_sale(ctx, role_tag: discord.Role, cost):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –ø—Ä–æ–¥–∞–∂—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å —Ä–æ–ª—å"""
    role_name = ctx.guild.get_role(role_tag.id)
    with SQLite(db) as sqlite:
        sqlite.add_role(role_name=role_name, role_id=role_tag.id, price=cost)
    await ctx.send(f'–†–æ–ª—å {role_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {cost} RUB')


@bot.command()
@commands.has_role(config.ADMIN_ROLE_NAME)
async def remove_role_from_sale(ctx, role_tag: discord.Role):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –ø—Ä–æ–¥–∞–∂–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ù–ï —Å–º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å —Ä–æ–ª—å"""
    role_name = ctx.guild.get_role(role_tag.id)
    with SQLite(db) as sqlite:
        sqlite.remove_role(role_id=role_tag.id)
    await ctx.send(f'–†–æ–ª—å {role_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–¥–∞–∂–∏! –ï—ë –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É—Ç –∫—É–ø–∏—Ç—å.')


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        parameter_name = error.param.name
        error_message = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä {parameter_name}."
        await ctx.send(error_message)
    elif isinstance(error, commands.CommandNotFound):
        await ctx.send("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    elif isinstance(error, commands.MissingRole):
        await ctx.send(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å {config.ADMIN_ROLE_NAME}.')
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")


@bot.command()
async def roles(ctx):
    "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–µ–π"
    embed = discord.Embed(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏",
                          description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—Å —Ä–æ–ª—å",
                          color=discord.Color.blue())

    with SQLite(db) as sqlite:
        saled_roles = sqlite.get_saled_roles()
    logger.info(saled_roles)
    buttons = []
    for i, saled_role in enumerate(saled_roles):
        embed.add_field(name=f"{i + 1}. @{saled_role['role_name']}", value=f"{saled_role['price_rub']} —Ä—É–±/–º–µ—Å—è—Ü",
                        inline=False)
        buttons.append(Button(custom_id=f"{saled_role['role_id']}", label=f"{saled_role['role_name']}",
                              style=discord.ButtonStyle.primary))

    async def button_callback(interaction):
        role_id = interaction.data["custom_id"]
        label = "None"
        for component in interaction.message.components:
            for button in component.children:
                if button.custom_id == role_id:
                    label = button.label
                    break
        user_id = interaction.user.id
        user = await bot.fetch_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
        price_rub = None
        for role in saled_roles:
            if role['role_name'] == label:
                price_rub = role['price_rub']
                break
        if not (price_rub):
            await user.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –£–∂–µ —Ä–µ—à–∞–µ–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ä–æ–ª—å.")
            raise Exception(f"–û—à–∏–±–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ —Ä–æ–ª—å {label}")

        confirmation_url = await Yookassa_Provider().pay_request(user_id, role_id, label, price_rub)

        message = f"–ü—Ä–∏–≤–µ—Ç {user.mention}! –û–ø–ª–∞—Ç–∏—Ç–µ —Ä–æ–ª—å {label} –Ω–∞ 1 –º–µ—Å—è—Ü. \n –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {confirmation_url} \n –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üôè"

        await user.send(message)

    view = discord.ui.View()
    for button in buttons:
        button.callback = button_callback
        view.add_item(button)

    await ctx.send(embed=embed, view=view)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')
    global MAIN_GUILD
    MAIN_GUILD = bot.get_guild(config.DISCORD_SERVER_ID)
    bot.loop.create_task(start_worker_proccess())
